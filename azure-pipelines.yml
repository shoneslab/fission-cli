# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

# Set variables once
variables:
  fission_version: 1.0-rc1
  tag_name: 0.0.1


steps:
- script: |
    cd $(System.DefaultWorkingDirectory)
    curl -Lo fission  https://github.com/fission/fission/releases/download/$(fission_version)/fission-cli-osx
    pwd
    ls
    #tar -czvf fission.tar fission
    #rm fission
  displayName: 'Download a file and tar it'

- task: ArchiveFiles@2
  displayName: "Archive files"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fission"
    includeRootFolder: false
    archiveType: tar
    archiveFile: "$(System.DefaultWorkingDirectory)/$(Build.BuildId).tar"  
    replaceExistingArchive: true 

- script: |
    pwd
    ls
# Archive Files
# Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
#- task: ArchiveFiles@2
  #inputs:
    #rootFolderOrFile: '$(Build.BinariesDirectory)' 
    #includeRootFolder: true
    #archiveType: 'zip' # Options: zip, 7z, tar, wim
    #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    #archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip' 
    #replaceExistingArchive: true   

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

# Publish Build Artifacts
# Publish build artifacts to Azure Pipelines/TFS or a file share
- task: PublishBuildArtifacts@1
  displayName: Publish Build Artifacts (application tar)
  inputs:
    pathtoPublish: '$(System.DefaultWorkingDirectory)' 
    artifactName: 'drop' 
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
  timeoutInMinutes: 1  

# GitHub Release
# Create, edit, or discard a GitHub release.
#- task: GithubRelease@0
#  inputs:
#    gitHubConnection: 'shoneslab-fissioncli-token'
#    repositoryName: 'fission-cli'
#    action: 'create' # Options: create, edit, discard
#    target: '$(build.sourceVersion)' # Required when action == create || action == edit
#    tagSource: 'manual' # Required when action == create. Options: auto, manual
#    tag: $(tag_name) # Required when action == edit || action == discard || tagSource == manual
#    title: 'Sample Test' # Optional
#    #releaseNotesSource: 'file' # Optional. Options: file, input
#    #releaseNotesFile: # Optional
#    #releaseNotes: # Optional
#    assets: '$(build.artifactStagingDirectory)/*.tar' # Optional
#    #assetUploadMode: 'delete' # Optional. Options: delete, replace
#    #isDraft: false # Optional
#    #isPreRelease: false # Optional
#    #addChangeLog: true # Optional

